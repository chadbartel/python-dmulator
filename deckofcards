__author__ = 'v-chbart'

import random

class Card(object):
    suit_names = ["Spades", "Clubs", "Diamonds", "Hearts"]
    face_names = [None, "Ace", "2", "3", "4", "5", "6", "7",
                  "8", "9", "10", "Jack", "Queen", "King"]

    def __init__(self, suit=0, face=2):
        self.suit = suit
        self.face = face

    def __str__(self):
        return "%s of %s" % (Card.face_names[self.face],
                            Card.suit_names[self.suit])

    def __cmp__(self, other):
        t1 = self.suit, self.face
        t2 = other.suit, other.face

        return (self < other) - (other < self)

class Deck(object):

    def __init__(self):
        """
        This initialization builds the deck with
        52 Card objects.
        """
        self.cards = []
        for suit in range(4):
            for face in range(1,14):
                card = Card(suit, face)
                self.cards.append(card)

    def __str__(self):
        res = []
        for card in self.cards:
            res.append(str(card))
        return '\n'.join(res)

    def add_card(self, card):
        """
        Adds card to deck
        """
        self.cards.remove(card)

    def remove_card(self, card):
        self.cards.remove(card)

    def pop_card(self, i=-1):
        """
        i: index of the card to pop; by default, pops the last card
        """
        return self.cards.pop(i)

    def shuffle(self):
        random.shuffle(self.cards)

    def sort(self):
        self.cards.sort()

    def move_cards(self, hand, num):
        """
        Moves cards from deck to Hand

        hand: destination Hand object
        num: integer number of cards to move
        """
        for i in range(num):
            hand.add_card(self.pop_card())

class Hand(Deck):
    """Represents a hand of playing cards."""

    def __init__(self, label=''):
        self.cards = []
        self.label = label

    def find_defining_class(obj, method_name):
        """
        Finds and return the calss object that will provide
        the definition of method_name (as a string) if it is
        invoked in obj.

        obj: any python object
        method_name: string method name
        """

        for ty in type(obj).mro():
            if method_name in ty.__dict__:
                return ty
        return None

if __name__ == '__main__':
    deck = Deck()
    deck.shuffle()

    hand = Hand()
    print(find_defining_class(hand, 'shuffle'))

    deck.move_cards(hand, 5)
    hand.sort()
    print(hand)
