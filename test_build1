__author__ = 'Chaddle'

class Master(object):

    def __init__(self, name):
        self.name = str(name).strip()
        self.master_dict = {}

    def get_stats(self):
        # Set all properties here like the Class
        import re
        from bs4 import BeautifulSoup
        import urllib.request

        self.name = self.name.lower()
        path = "file:///...//monsters//"
        path += self.name + ".htm"
        try:
            page = urllib.request.urlopen(path)
            soup = BeautifulSoup(page.read())
            keys = []
            values = []

            for td in soup.find_all('td'):
                try:
                    values.append(str(td.text).strip())
                except AttributeError:
                    values.append(str(td).strip())

            count = 0
            for th in soup.find_all('a', {"href": re.compile("intro.htm#")}):
                keys.append(str(th.get('href')))
                keys[count] = keys[count].replace("intro.htm#", "").strip()
                count += 1

            self.master_dict = dict(zip(keys, values))

            # One way to make a nested dict
            abilities = self.master_dict.get('abilities')
            if abilities:
                self.master_dict['abilities'] = {m.group(1).capitalize(): int(m.group(2))
                                              for m in re.finditer(r'(\w+) (\d+)', abilities)}

            saves = self.master_dict.get('saves')
            if saves:
                self.master_dict['saves'] = {m.group(1): int(m.group(2))
                                          for m in re.finditer(r'(\w+) (\+\d|\-\d)+', saves)}

            organization = self.master_dict.get('organization')
            if organization:
                self.master_dict['organization'] = {m.group(1).capitalize(): m.group(2)
                    for m in re.finditer(r'(\w+) \(([^)]+)\)',
                                         organization)}

        except LookupError as e:
            print(e)

    def attack(self, other):
        import random
        if random.randint(1, 20) >= other.dict['armorClass']:
            damage = self.master_dict['attack']
            return damage
        else:
            pass

    # This method doesn't seem to work
    def save(self, saveType):
        import random
        try:
            if str(saveType).capitalize() == 'Fort':
                save = random.randint(1, 20) + int(self.master_dict['saves']['Fort'])
                return save
            elif str(saveType).capitalize() == 'Ref':
                save = random.randint(1, 20) + int(self.master_dict['saves']['Ref'])
                return save
            elif str(saveType).capitalize() == 'Will':
                save = random.randint(1, 20) + int(self.master_dict['saves']['Will'])
                return save
        except LookupError as e:
            print(e)

class Player(Master):
    char_stats_dict = {}
    char_equipment_dict = {}

    def __init__(self, player_name):
        self.player_name = player_name.strip()
        super().__init__(self)

    def create_char(self):
        if self.char_stats_dict == {}:
            self.roll_stats()
            self.pick_class()
            self.pick_race()
            self.assign_stats()

    def roll_stats(self):
        '''
        Uses the "4d6, drop lowest" rule.
        :return:
        '''
        dice_totals = []
        for i in range(6):
            dice_results = []
            for j in range(4):
                from random import randint
                temp = randint(1, 6)
                dice_results.append(temp)
            dice_results.remove(min(dice_results))
            dice_totals.append(sum(dice_results))
            self.dice_totals = dice_totals
        print(self.dice_totals)
        return self.dice_totals

    def pick_class(self):
        pass

    def pick_race(self):
        pass

    def assign_stats(self):
        count = 1
        print("Assignment key:\n", "1 = Str\n", "2 = Con\n",
              "3 = Dex\n", "4 = Int\n", "5 = Wis\n", "6 = Cha")
        for s in self.dice_totals:
            print("Dice total #", count, "=", s)
            player_in = int(input("Where would you like to assign this value? (1 - 6):"))
            if player_in == 1:
                self.char_stats_dict["Str"] = s
            elif player_in == 2:
                self.char_stats_dict["Con"] = s
            elif player_in == 3:
                self.char_stats_dict["Dex"] = s
            elif player_in == 4:
                self.char_stats_dict["Int"] = s
            elif player_in == 5:
                self.char_stats_dict["Wis"] = s
            elif player_in == 6:
                self.char_stats_dict["Cha"] = s
            else:
                print("This isn't an acceptable response. Try again.")
                self.assign_stats()
            count += 1

chad = Player("Chad")
chad.create_char()
print(chad.char_stats_dict)
